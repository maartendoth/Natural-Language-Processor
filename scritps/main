#! /bin/bash
clear
root=".."
workdir="$root/problems"
solutionsdir="$root/solved"
mkdir -p "$solutionsdir"

echo "Start preprocessor..."

capitals() { 
    echo "    Start case filter"

    local problemlist="$workdir"/uppercase_only
    local output_dir="${problemlist}.d"
    rm -fr "$output_dir"   
    mkdir -p "$output_dir"

    # find all words using only upper case
   
    while read -ra words; do
    #echo "${words[@]}"
    wordcount="${#words[@]}"

        c=0
        for ((i=0;i<"$wordcount";i++)); do
            if [[ "${words[$i]}" =~ ^[A-Z]*$ ]]; then
                let c++
            fi
        done
        if [ "$c" -gt 1 ]; then
            echo "${words[@]}" >> "$output_dir"/multiple_instences
        fi


        for ((i=0;i<"$wordcount";i++)); do

            if [[ "${words[$i]}" =~ ^[A-Z]*$ ]]; then
                if [[ "${words[$i]}" =~ ^[IVXLCDM]+$ ]]; then
                    if [[ "${words[$i-1]:0:1}" =~ ^[A-Z]$ ]]; then
                        echo "${words[$i]} --> ${words[@]}" >> "$solutionsdir"/roman_numerals
                    else 
                        if [[ "${words[$i+1]:0:1}" =~ ^[A-Z]$ ]]; then
                            echo "${words[$i]} --> ${words[@]}" >> "$solutionsdir"/full_name
                        else
                            echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/unkown
                        fi
                    fi
                else
                    #echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/only-uppercase
                    character_count=`echo "${words[$i]}" | wc -m`
                    if [ "$character_count" -eq 1 ]; then
                        echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/one_character
                    else 
                        echo "${words[$i]}" >> "$output_dir"/multiple_character
                    fi

                fi
            fi
        done

    done < "$problemlist"

    find_abbreviation_names() {
        # with n less then 3, it will find to manny false positives...
        # and will break if the input to ngrams contains single or double qoutes.!!


        echo "    Start searching for abbreviation names..."

        while read -r input; do
            #echo "input = $input"
            
            #input='TPR'
            needle=`echo "$input" | tr '[:upper:]' '[:lower:]'`
            ##echo $needle
            needle_count=`printf "$needle" |wc -m`
            #echo $needle_count
            if [ $needle_count -lt 3 ]; then continue; fi
            while read -r line; do
                arr=("$line")
                for i in "${#arri[*]}"; do 
                initals=`printf "%s\n" "${arr[$i]}" | sed -e 's/$/ /' -e 's/\([^ ]\)[^ ]* /\1/g' -e 's/^ *//' | tr '[:upper:]' '[:lower:]'`
                done
                found=`echo "$initals" | grep "$needle"`
                if [ $? -eq 0 ]; then
                #echo "$line"
                result=`echo "$line" | ./ngrams $needle_count`
                while read -r candidate; do
                    echo "$candidate"
                        initals=`echo "$candidate" | sed -e 's/$/ /' -e 's/\([^ ]\)[^ ]* /\1/g' -e 's/^ *//' | tr '[:upper:]' '[:lower:]'` 
                    #echo "$initals"
                        if [ "$initals" == "$needle" ]; then
                            echo "$input='$candidate'" >> "$output_dir"/abbreviation
                        fi
                    done <<<"$result"
                fi

            done < "$problemlist"

        done
    }
    sort -u < "$output_dir"/multiple_character | find_abbreviation_names

}
hyphens() { 
    echo "Start punctuation filter"

    local problemlist="$workdir"/-
    local output_dir="${problemlist}.d"
    rm -fr "$output_dir"        
    mkdir -p "$output_dir"

    while read -ra words; do
    #echo "${words[@]}"
    wordcount="${#words[@]}"

        for ((i=0;i<"$wordcount";i++)); do

            dash_count=`echo "${words[$i]}" | tr -dc "-" | wc -m`
            #echo "$dash_count x - : ${words[$i]}" >> "$output_dir"/test

            if ! [ -z "$dash_count" ] && [ "$dash_count" -eq 1 ]; then

                # ' - ' unkown
                if [ "${words[$i]}" == "-" ]; then
                    echo " - ==> ${words[@]}" >> "$output_dir"/in_line
                elif ! [[ "${words[$i]}" =~ [A-Za-z] ]]; then
                    echo "${words[$i]}" >> "$output_dir"/non-words
                elif [[ "${words[$i]}" == "-°C" ]]; then
                    echo "${words[$i]}" >> "$output_dir"/spacial-case
                else
                    echo "${words[$i]}" >> "$output_dir"/1
                fi
            elif ! [ -z "$dash_count" ] && [ "$dash_count" -gt 1 ]; then
                echo "${words[$i]}" >> "$output_dir"/multiple
            else
                #echo "${words[$i]}" >> "$output_dir"/"not_dash(not part of this problem)"
                :
            fi

        done

    done < "$problemlist"

    sed -i "s/\"//g" "$output_dir"/1
    sed -i "s/…//g" "$output_dir"/1
}

one_hyphen() {
    local problemlist="$workdir"/-.d/1
    local output_dir="${problemlist}.d"

    rm -fr "$output_dir"        
    mkdir -p "$output_dir"

    while IFS="-" read -ra parts; do

        if [[ "${parts[0]:0:1}" =~ ^[{A-Z}]$ ]] && [[ "${parts[1]:0:1}" =~ ^[A-Z]$ ]]; then
            if [ "${parts[0]}" == "${parts[1]}" ]; then
                echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/animal_sounds

            # if one of the words contain no lower case letters    
            elif ! [[ "${parts[0]}" =~ [a-z] ]] || ! [[ "${parts[1]}" =~ [a-z] ]]; then
                echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unkown

            # if one of the words contain more then one Capital letter    
            elif [[ "${parts[0]}" =~ [A-Z]{2,} ]] || [[ "${parts[1]}" =~ [A-Z]{2,} ]]; then
                echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unkown2
            else
                echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/names
            fi      
        elif [[ "${parts[0]:0:1}" =~ ^[a-z]$ ]] && [[ "${parts[1]:0:1}" =~ ^[a-z]$ ]]; then
            echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/words
        else
            echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unsure
            # filter out the capitals for start of sentence...
        fi

        # if first item in line, and second is space, its bullet point list - Oh NON ?
    done < "$problemlist"
    rm -f "$problemlist"
}
multiple_hyphens() {
    local problemlist="$workdir"/-.d/multiple
    local output_dir="${problemlist}.d"

    rm -fr "$output_dir"        
    mkdir -p "$output_dir"

    while IFS="-" read -ra parts; do


# if all syllables are the same, its probebly a sound (bla-bla-bla)


# if no lower case ; probably spelling
:
# if it has 2 hyphens, one on each end, its probebly a quote (-HAAa-)

# if conctaining lower case, but also multipe capitals in one part; probebly a sound (-HAAa-)

# if each part contains only 1 letter; probebly spelling (E-A-U)

# does it contain connection words; à, en, de, et, : probebly a phrase




    done < ./problems/-/multiple

}









# filter out all non-french words, in 1/words
# remove duplicates in all resulting wordlists.

capitals
hyphens;
one_hyphen; exit
multiple_hyphens
exit