#! /bin/bash
clear
root=".."
workdir="$root/problems"
mkdir -p "$workdir"/bk
echo "the problems in this folder have already been solved." > "$workdir"/bk/readme.info
solutionsdir="$root/solved"
mkdir -p "$solutionsdir"

echo "Start preprocessor..."

capitals() { 

    local problemlist="$workdir"/uppercase_only
    local output_dir="${problemlist}.d"
    rm -fr "$output_dir"   
    mkdir -p "$output_dir"

    casefilter() { 
        echo "    Start case filter"

        # find all words using only upper case
    
        while read -ra words; do
        #echo "${words[@]}"
        wordcount="${#words[@]}"

            c=0
            for ((i=0;i<"$wordcount";i++)); do
                if [[ "${words[$i]}" =~ ^[A-Z]*$ ]]; then
                    let c++
                fi
            done

            for ((i=0;i<"$wordcount";i++)); do

                if [[ "${words[$i]}" =~ ^[A-Z]*$ ]]; then
                    if [[ "${words[$i]}" =~ ^[IVXLCDM]+$ ]]; then
                        if [[ "${words[$i-1]:0:1}" =~ ^[A-Z]$ ]]; then
                            echo "${words[$i]} --> ${words[@]}" >> "$solutionsdir"/roman_numerals
                        else 
                            if [[ "${words[$i+1]:0:1}" =~ ^[A-Z]$ ]]; then
                                echo "${words[$i]} --> ${words[@]}" >> "$solutionsdir"/full_name
                            else
                                if [ "$c" -gt 1 ]; then
                                    echo "${words[@]}" >> "$output_dir"/multiple_unkown
                                else 
                                    echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/unkown
                                fi
                            fi
                        fi
                    else
                        #echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/only-uppercase
                        character_count=`echo "${words[$i]}" | wc -m`
                        if [ "$character_count" -eq 1 ]; then
                            echo "${words[$i]} --> ${words[@]}" >> "$output_dir"/one_character
                        else 

                            if [ "$c" -gt 1 ]; then
                                echo "${words[@]}" >> "$output_dir"/multiple_character_multiple_instences
                            else
                                echo "${words[$i]}" >> "$output_dir"/multiple_character
                            fi

                            # if containing lower case, but also multiple capitals in one part; probably a sound (HAAa or AAHhaa)

                        fi

                    fi
                fi
            done

        done < "$problemlist"
    }
    find_abbreviation_names() {
        # with n less then 3, it will find to manny false positives...
        # and will break if the input to ngrams contains single or double qoutes.!!


        echo "    Start searching for abbreviation names..."

        while read -r input; do
            #echo "input = $input"
            
            #input='TPR'
            needle=`echo "$input" | tr '[:upper:]' '[:lower:]'`
            ##echo $needle
            needle_count=`printf "$needle" | wc -m`
            #echo $needle_count
            if [ $needle_count -lt 3 ]; then continue; fi
            while read -r line; do
                arr=("$line")
                for i in "${#arri[*]}"; do 
                initals=`printf "%s\n" "${arr[$i]}" | sed -e 's/$/ /' -e 's/\([^ ]\)[^ ]* /\1/g' -e 's/^ *//' | tr '[:upper:]' '[:lower:]'`
                done
                found=`echo "$initals" | grep "$needle"`
                if [ $? -eq 0 ]; then
                #echo "$line"
                result=`echo "$line" | ./ngrams $needle_count`
                while read -r candidate; do
                    #echo "$candidate"
                        initals=`echo "$candidate" | sed -e 's/$/ /' -e 's/\([^ ]\)[^ ]* /\1/g' -e 's/^ *//' | tr '[:upper:]' '[:lower:]'` 
                    #echo "$initals"
                        if [ "$initals" == "$needle" ]; then
                            echo "$input='$candidate'" >> "$solutionsdir"/abbreviation
                        fi
                    done <<<"$result"
                fi

            done < "$problemlist"

        done

        mv "$problemlist" "$workdir"/bk/uppercase_only
    }
    

    casefilter
    sort -u < "$output_dir"/multiple_character | find_abbreviation_names
}
hyphens() { 

    hyphen_problems() { 
        echo "    Start punctuation filter"

        local problemlist="$workdir"/-
        local output_dir="${problemlist}.d"
        rm -fr "$output_dir"        
        mkdir -p "$output_dir"

        while read -ra words; do
        #echo "${words[@]}"
        wordcount="${#words[@]}"

            for ((i=0;i<"$wordcount";i++)); do

                dash_count=`echo "${words[$i]}" | tr -dc "-" | wc -m`
                #echo "$dash_count x - : ${words[$i]}" >> "$output_dir"/test

                if ! [ -z "$dash_count" ] && [ "$dash_count" -eq 1 ]; then

                    # ' - ' unkown
                    if [ "${words[$i]}" == "-" ]; then
                        echo " - ==> ${words[@]}" >> "$output_dir"/in_line
                    elif ! [[ "${words[$i]}" =~ [A-Za-z] ]]; then
                        echo "${words[$i]}" >> "$output_dir"/non-words
                    elif [[ "${words[$i]}" == "-°C" ]]; then
                        echo "${words[$i]}" >> "$output_dir"/spacial-case
                    else
                        echo "${words[$i]}" >> "$output_dir"/1
                    fi
                elif ! [ -z "$dash_count" ] && [ "$dash_count" -gt 1 ]; then
                    echo "${words[$i]}" >> "$output_dir"/multiple
                else
                    #echo "${words[$i]}" >> "$output_dir"/"not_dash(not part of this problem)"
                    :
                fi

            done

        done < "$problemlist"

        sed -i "s/\"//g" "$output_dir"/1
        sed -i "s/…//g" "$output_dir"/1
    }
    one_hyphen() {
        local problemlist="$workdir"/-.d/1
        local output_dir="${problemlist}.d"

        rm -fr "$output_dir"        
        mkdir -p "$output_dir"

        while IFS="-" read -ra parts; do

            if [[ "${parts[0]:0:1}" =~ ^[{A-Z}]$ ]] && [[ "${parts[1]:0:1}" =~ ^[A-Z]$ ]]; then
                if [ "${parts[0]}" == "${parts[1]}" ]; then
                    echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/animal_sounds

                # if one of the words contain no lower case letters    
                elif ! [[ "${parts[0]}" =~ [a-z] ]] || ! [[ "${parts[1]}" =~ [a-z] ]]; then
                    echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unkown

                # if one of the words contain more then one Capital letter    
                elif [[ "${parts[0]}" =~ [A-Z]{2,} ]] || [[ "${parts[1]}" =~ [A-Z]{2,} ]]; then
                    echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unkown2
                else
                    echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/names
                fi      
            elif [[ "${parts[0]:0:1}" =~ ^[a-z]$ ]] && [[ "${parts[1]:0:1}" =~ ^[a-z]$ ]]; then
                echo "${parts[0]}-${parts[1]}" >> "$solutionsdir"/words
            else
                echo "${parts[0]}-${parts[1]}" >> "$output_dir"/unsure

    # !! filter out the capitals for start of sentence...

            fi

            # if first item in line, and second is space, its bullet point list - Oh NON ?
        done < "$problemlist"
        rm -f "$problemlist"
    }
    multiple_hyphens() {
        local problemlist="$workdir"/-.d/multiple
        local output_dir="${problemlist}.d"

        rm -fr "$output_dir"        
        mkdir -p "$output_dir"

        while IFS= read -r item; do
        items=(`echo "$item" | tr '-' ' '`)


        # if it has 2 hyphens, one on each end, its probably a quote (-HAAa-)
        if [[ "${item}" =~ ^-.+-$ ]] && [ "${#items[@]}" -eq 1 ]; then
        echo "$item" >> "$solutionsdir"/quote

        # if all syllables are the same, its probably a sound (bla-bla-bla)
        # if unique-sorting the elements of the array results in only one element, then print "ok". Otherwise print "bad".
        elif [ "${#items[@]}" -gt 1 ] && [ $(printf "%s\000" "${items[@]}" | LC_ALL=C sort -z -u | grep -z -c .) -eq 1 ] ; then
        echo "$item" >> "$solutionsdir"/animal_sound



        # if the word without hypens exist (in dictionary) then its probably spelling.
        # if it not in the dictionary but, but dividing the word with french spelling rules results in same hyphenized word, then it's probably spelling
        # if each part contains only 1 letter; probably spelling (E-A-U)
        # if no lower case ; probably spelling
        elif ! [[ "$item" =~ [[:lower:]] ]]; then
            echo "$item" >> "$solutionsdir"/spelling

        # does it contain connection words; à, en, de, : probably a phrase
        elif [[ "$item" =~ ^.+à|-en-|-de-.+$ ]]; then
            echo "$item" >> "$solutionsdir"/phrase

        else
            
            # if the word without hypens exist in the source file then its probably spelling.
            word=`echo "$item" | tr -d '-'`; grep "$word" < "$workdir"/- &>-
            if [ "$?" -eq 0 ];then
                echo "$word" >> "$solutionsdir"/spelling
            else 
                # else unknown
                echo "$item" >> "$output_dir"/unknown
            fi
        
        fi

        done < "$workdir"/-.d/multiple

        rm -f "$workdir"/-.d/multiple
    }

    hyphen_problems; one_hyphen; multiple_hyphens

    mv "$workdir"/- "$workdir"/bk/-
}

# filter out all non-french words, in 1/words
# remove duplicates in all resulting wordlists.
capitals; hyphens
exit